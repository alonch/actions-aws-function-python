name: Deploy Lambda Python Function

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for AWS authentication
      contents: read   # Required to checkout the repository

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: ${{ github.actor }}

      # Optional: Set up Terraform backend
      - name: Set up backend
        uses: alonch/actions-aws-backend-setup@main
        id: backend
        with:
          instance: python-lambda-example

      # Optional: Set up network infrastructure (VPC, subnets, security groups)
      # When this action runs, Lambda functions will be deployed to private subnets
      # If omitted, Lambda functions will use the default VPC (when EFS is enabled)
      - name: Set up network
        uses: realsensesolutions/actions-aws-network@main

      - name: Deploy Lambda Worker
        id: worker
        uses: ./
        with:
          name: demo-worker
          python-version: "3.11"
          entrypoint-file: api/app.py
          entrypoint-function: handler
          artifacts: dist  # Specify the artifacts directory
          volume-name: db  # EFS volume will be auto-provisioned
          volume-path: /mnt/db
          memory: 256
          timeout: 10
          worker: true  # Enable worker mode with SQS queue
          permissions: |
            s3: read
            dynamodb: write


      # Deploy the Lambda function
      - name: Deploy Lambda Web
        id: deploy
        uses: ./
        with:
          name: demo
          python-version: "3.11"
          entrypoint-file: api/app.py
          entrypoint-function: handler
          artifacts: dist  # Specify the artifacts directory
          volume-name: db  # EFS volume will be auto-provisioned
          volume-path: /mnt/db
          memory: 256
          timeout: 10
          env: |
            ENVIRONMENT: production
            LOG_LEVEL: INFO
          allow-public-access: true
          permissions: |
            s3: read
            sqs: write
      # Optional: Output the created resources
      - name: Output Lambda info
        run: |
          echo "Lambda ARN: ${{ steps.deploy.outputs.arn }}"
          echo "Lambda URL: ${{ steps.deploy.outputs.url }}"
          echo "Queue ARN: ${{ steps.worker.outputs.queue-arn }}"
          echo "Queue Name: ${{ steps.worker.outputs.queue-name }}"
          echo "Queue URL: ${{ steps.worker.outputs.queue-url }}"
        shell: bash