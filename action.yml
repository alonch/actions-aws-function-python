name: 'AWS Lambda Python Function'
description: 'Deploy a Python function to AWS Lambda'
author: 'alonch'
branding:
  icon: 'cloud-lightning'
  color: 'blue'

inputs:
  action:
    description: 'Desired outcome: apply, plan or destroy'
    required: false
    default: 'apply'
  name:
    description: 'Function name'
    required: true
  arm:
    description: 'Run in ARM compute'
    required: false
    default: 'true'
  python-version:
    description: 'Python version. Supported versions: 3.8, 3.9, 3.10, 3.11, 3.12'
    required: false
    default: '3.11'
  entrypoint-file:
    description: 'Path to entry file'
    required: true
  entrypoint-function:
    description: 'Function on the entrypoint-file to handle events'
    required: true
  memory:
    description: '128 (in MB) to 10,240 (in MB)'
    required: false
    default: '128'
  env:
    description: 'List of environment variables in YML format'
    required: false
    default: 'CREATE_BY: alonch/actions-aws-function-python'
  permissions:
    description: 'List of permissions following Github standard of service: read or write. In YML format'
    required: false
    default: ''
  artifacts:
    description: 'This folder will be zip and deploy to Lambda'
    required: false
    default: ''
  timeout:
    description: 'Maximum time in seconds before aborting the execution'
    required: false
    default: '3'
  allow-public-access:
    description: 'Generate a public URL. WARNING: ANYONE ON THE INTERNET CAN RUN THIS FUNCTION'
    required: false
    default: ''
  volume:
    description: 'Creates an EFS volume and mounts it to /mnt/{volume}. Persists data across invocations.'
    required: false
    default: ''

outputs:
  arn:
    description: 'ARN of the deployed Lambda function'
    value: ${{ steps.terraform.outputs.arn }}
  url:
    description: 'Public accessible URL, if allow-public-access=true'
    value: ${{ steps.terraform.outputs.url }}

runs:
  using: "composite"
  steps:
    - name: Terraform init
      run: |
        terraform init \
          -backend-config="bucket=$TF_BACKEND_s3" \
          -backend-config="dynamodb_table=$TF_BACKEND_dynamodb" \
          -backend-config="key=$TF_BACKEND_key"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_BACKEND_key: "actions-aws-function-python/${{ inputs.name }}"
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_arm: ${{ inputs.arm }}
        TF_VAR_python_version: ${{ inputs.python-version }}
        TF_VAR_entrypoint_file: ${{ github.workspace }}/${{ inputs.entrypoint-file }}
        TF_VAR_entrypoint_function: ${{ inputs.entrypoint-function }}
        TF_VAR_memory: ${{ inputs.memory }}
        TF_VAR_timeout: ${{ inputs.timeout }}
        TF_VAR_allow_public_access: ${{ inputs.allow-public-access }}
        TF_VAR_artifacts: ${{ github.workspace }}/${{ inputs.artifacts }}
        TF_VAR_env: ${{ inputs.env }}
        TF_VAR_permissions: ${{ inputs.permissions }}
        TF_VAR_volume: ${{ inputs.volume }}

    - name: Terraform plan
      if: inputs.action == 'plan'
      run: terraform plan
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_arm: ${{ inputs.arm }}
        TF_VAR_python_version: ${{ inputs.python-version }}
        TF_VAR_entrypoint_file: ${{ github.workspace }}/${{ inputs.entrypoint-file }}
        TF_VAR_entrypoint_function: ${{ inputs.entrypoint-function }}
        TF_VAR_memory: ${{ inputs.memory }}
        TF_VAR_timeout: ${{ inputs.timeout }}
        TF_VAR_allow_public_access: ${{ inputs.allow-public-access }}
        TF_VAR_artifacts: ${{ github.workspace }}/${{ inputs.artifacts }}
        TF_VAR_env: ${{ inputs.env }}
        TF_VAR_permissions: ${{ inputs.permissions }}
        TF_VAR_volume: ${{ inputs.volume }}

    - name: Terraform destroy
      if: inputs.action == 'destroy'
      run: terraform destroy -auto-approve
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_arm: ${{ inputs.arm }}
        TF_VAR_python_version: ${{ inputs.python-version }}
        TF_VAR_entrypoint_file: ${{ github.workspace }}/${{ inputs.entrypoint-file }}
        TF_VAR_entrypoint_function: ${{ inputs.entrypoint-function }}
        TF_VAR_memory: ${{ inputs.memory }}
        TF_VAR_timeout: ${{ inputs.timeout }}
        TF_VAR_allow_public_access: ${{ inputs.allow-public-access }}
        TF_VAR_artifacts: ${{ github.workspace }}/${{ inputs.artifacts }}
        TF_VAR_env: ${{ inputs.env }}
        TF_VAR_permissions: ${{ inputs.permissions }}
        TF_VAR_volume: ${{ inputs.volume }}

    - name: Terraform apply
      id: terraform
      if: inputs.action == 'apply'
      run: |
        terraform apply -auto-approve
        ARN=$(terraform output -raw lambda_arn | tr -d '\r\n')
        URL=$(terraform output -raw lambda_url | tr -d '\r\n')

        # Set outputs properly
        echo "arn=$ARN" >> "$GITHUB_OUTPUT"
        echo "url=$URL" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_arm: ${{ inputs.arm }}
        TF_VAR_python_version: ${{ inputs.python-version }}
        TF_VAR_entrypoint_file: ${{ github.workspace }}/${{ inputs.entrypoint-file }}
        TF_VAR_entrypoint_function: ${{ inputs.entrypoint-function }}
        TF_VAR_memory: ${{ inputs.memory }}
        TF_VAR_timeout: ${{ inputs.timeout }}
        TF_VAR_allow_public_access: ${{ inputs.allow-public-access }}
        TF_VAR_artifacts: ${{ github.workspace }}/${{ inputs.artifacts }}
        TF_VAR_env: ${{ inputs.env }}
        TF_VAR_permissions: ${{ inputs.permissions }}
        TF_VAR_volume: ${{ inputs.volume }}